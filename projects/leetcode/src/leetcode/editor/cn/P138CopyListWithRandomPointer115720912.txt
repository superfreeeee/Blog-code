/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

    class Solution {
        private Map<Integer, Node> mapper = new HashMap<>();
        private Node res = new Node(0);

        public Node copyRandomList(Node head) {
            Node cur = head, ptr = res;
            while (cur != null) {
                ptr = ptr.next = new Node(cur.val);
                cur = cur.next;
                mapper.put(ptr.val, ptr);
            }
            cur = head;
            ptr = res.next;
            while (cur != null) {
                if (cur.random != null) ptr.random = mapper.get(cur.random.val);
                cur = cur.next;
                ptr = ptr.next;
            }
            return res.next;
        }
    }

//total_testcases:19
//total_correct:11
//input_formatted:[[3,null],[3,0],[3,null]]
//expected_output:[[3,null],[3,0],[3,null]]
//code_output:[[3,null],[3,2],[3,null]]
